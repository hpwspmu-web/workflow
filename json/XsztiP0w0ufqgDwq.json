{
  "active": false,
  "connections": {
    "On clicking 'execute'": {
      "main": [
        [
          {
            "node": "Execute Command",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get File": {
      "main": [
        [
          {
            "node": "Merge Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If file too large": {
      "main": [
        [
          {
            "node": "Get File",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Merge Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge Items": {
      "main": [
        [
          {
            "node": "isDiffOrNew",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "isDiffOrNew": {
      "main": [
        [
          {
            "node": "Check Status",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Status": {
      "main": [
        [],
        [
          {
            "node": "File is different",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "File is new",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "File is different": {
      "main": [
        [
          {
            "node": "Edit existing file",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "File is new": {
      "main": [
        [
          {
            "node": "Create new file",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create new file": {
      "main": [
        [
          {
            "node": "Return",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit existing file": {
      "main": [
        [
          {
            "node": "Return",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items": {
      "main": [
        [],
        [
          {
            "node": "Execute Workflow",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Schedule Trigger": {
      "main": [
        [
          {
            "node": "Execute Command",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get file data": {
      "main": [
        [
          {
            "node": "If file too large",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Globals": {
      "main": [
        [
          {
            "node": "Get file data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Execute Command": {
      "main": [
        [
          {
            "node": "JSON formatting",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "JSON formatting": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Execute Workflow": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Execute Workflow Trigger": {
      "main": [
        [
          {
            "node": "Globals",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge Items",
            "type": "main",
            "index": 1
          }
        ]
      ]
    }
  },
  "createdAt": "2025-09-03T07:03:43.370Z",
  "id": "XsztiP0w0ufqgDwq",
  "isArchived": false,
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "name": "Backup credentials",
  "nodes": [
    {
      "parameters": {},
      "id": "0da7632b-e893-4880-abd1-bda7bbe582e6",
      "name": "On clicking 'execute'",
      "type": "n8n-nodes-base.manualTrigger",
      "position": [
        -640,
        272
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "## Subworkflow",
        "height": 691,
        "width": 2087,
        "color": 6
      },
      "id": "027b0a21-381c-4c27-ac76-6c7c99fe4472",
      "name": "Sticky Note",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -704,
        640
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "8d513345-6484-431f-afb7-7cf045c90f4f",
              "name": "Done",
              "type": "boolean",
              "value": true
            }
          ]
        },
        "options": {}
      },
      "id": "dce1906a-0f93-4ad0-838a-643a7775305f",
      "name": "Return",
      "type": "n8n-nodes-base.set",
      "position": [
        1168,
        992
      ],
      "typeVersion": 3.3
    },
    {
      "parameters": {
        "url": "={{ $json.download_url }}",
        "options": {}
      },
      "id": "7aaafd0e-7f7f-4400-a6b4-32aeef672408",
      "name": "Get File",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        288,
        720
      ],
      "typeVersion": 4.2
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "version": 1,
            "leftValue": "",
            "caseSensitive": true,
            "typeValidation": "strict"
          },
          "combinator": "and",
          "conditions": [
            {
              "id": "45ce825e-9fa6-430c-8931-9aaf22c42585",
              "operator": {
                "type": "string",
                "operation": "empty",
                "singleValue": true
              },
              "leftValue": "={{ $json.content }}",
              "rightValue": ""
            },
            {
              "id": "9619a55f-7fb1-4f24-b1a7-7aeb82365806",
              "operator": {
                "type": "string",
                "operation": "notExists",
                "singleValue": true
              },
              "leftValue": "={{ $json.error }}",
              "rightValue": ""
            }
          ]
        },
        "options": {}
      },
      "id": "24770422-537d-43ce-b626-cefa41b46b56",
      "name": "If file too large",
      "type": "n8n-nodes-base.if",
      "position": [
        80,
        752
      ],
      "typeVersion": 2
    },
    {
      "parameters": {},
      "id": "2a20ce89-4959-4113-ba5c-625e7155f01f",
      "name": "Merge Items",
      "type": "n8n-nodes-base.merge",
      "position": [
        80,
        1008
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "jsCode": "const orderJsonKeys = (jsonObj) => {\n  const ordered = {};\n  Object.keys(jsonObj).sort().forEach(key => {\n    ordered[key] = jsonObj[key];\n  });\n  return ordered;\n}\n\n// Check if file returned with content\nif (Object.keys($input.all()[0].json).includes(\"content\")) {\n  // Decode base64 content and parse JSON\n  const origWorkflow = JSON.parse(Buffer.from($input.all()[0].json.content, 'base64').toString());\n  const n8nWorkflow = $input.all()[1].json;\n  \n  // Order JSON objects\n  const orderedOriginal = orderJsonKeys(origWorkflow);\n  const orderedActual = orderJsonKeys(n8nWorkflow);\n\n  // Determine difference\n  if (JSON.stringify(orderedOriginal) === JSON.stringify(orderedActual)) {\n    $input.all()[0].json.github_status = \"same\";\n  } else {\n    $input.all()[0].json.github_status = \"different\";\n    $input.all()[0].json.n8n_data_stringy = JSON.stringify(orderedActual, null, 2);\n  }\n  $input.all()[0].json.content_decoded = orderedOriginal;\n// No file returned / new workflow\n} else if (Object.keys($input.all()[0].json).includes(\"data\")) {\n  const origWorkflow = JSON.parse($input.all()[0].json.data);\n  const n8nWorkflow = $input.all()[1].json;\n  \n  // Order JSON objects\n  const orderedOriginal = orderJsonKeys(origWorkflow);\n  const orderedActual = orderJsonKeys(n8nWorkflow);\n\n  // Determine difference\n  if (JSON.stringify(orderedOriginal) === JSON.stringify(orderedActual)) {\n    $input.all()[0].json.github_status = \"same\";\n  } else {\n    $input.all()[0].json.github_status = \"different\";\n    $input.all()[0].json.n8n_data_stringy = JSON.stringify(orderedActual, null, 2);\n  }\n  $input.all()[0].json.content_decoded = orderedOriginal;\n\n} else {\n  // Order JSON object\n  const n8nWorkflow = $input.all()[1].json;\n  const orderedActual = orderJsonKeys(n8nWorkflow);\n  \n  // Proper formatting\n  $input.all()[0].json.github_status = \"new\";\n  $input.all()[0].json.n8n_data_stringy = JSON.stringify(orderedActual, null, 2);\n}\n\n// Return items\nreturn $input.all();"
      },
      "id": "af738d76-99f5-4e86-8f29-45d229a7fb9a",
      "name": "isDiffOrNew",
      "type": "n8n-nodes-base.code",
      "position": [
        288,
        1008
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "dataType": "string",
        "value1": "={{$json.github_status}}",
        "rules": {
          "rules": [
            {
              "value2": "same"
            },
            {
              "value2": "different",
              "output": 1
            },
            {
              "value2": "new",
              "output": 2
            }
          ]
        }
      },
      "id": "5d6bf62e-0915-4b8a-81f3-b59f5231eafe",
      "name": "Check Status",
      "type": "n8n-nodes-base.switch",
      "position": [
        512,
        1008
      ],
      "typeVersion": 1
    },
    {
      "parameters": {},
      "id": "b8df0558-ffde-452a-a85b-c618b9790d55",
      "name": "File is different",
      "type": "n8n-nodes-base.noOp",
      "position": [
        720,
        1008
      ],
      "typeVersion": 1
    },
    {
      "parameters": {},
      "id": "a7d00d57-48af-4bbe-9ea1-3257f9360672",
      "name": "File is new",
      "type": "n8n-nodes-base.noOp",
      "position": [
        720,
        1168
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "resource": "file",
        "owner": {
          "__rl": true,
          "mode": "name",
          "value": "={{ $('Globals').item.json.repo.owner }}"
        },
        "repository": {
          "__rl": true,
          "mode": "name",
          "value": "={{ $('Globals').item.json.repo.name }}"
        },
        "filePath": "={{ $('Globals').item.json.repo.path }}{{$('Execute Workflow Trigger').first().json.id}}.json",
        "fileContent": "={{$('isDiffOrNew').item.json[\"n8n_data_stringy\"]}}",
        "commitMessage": "={{$('Execute Workflow Trigger').first().json.name}} ({{$json.github_status}})"
      },
      "id": "4cf0bc67-1808-4db1-9051-a650345bee8e",
      "name": "Create new file",
      "type": "n8n-nodes-base.github",
      "position": [
        944,
        1168
      ],
      "typeVersion": 1,
      "webhookId": "1e5a3a7b-02df-45a0-9719-2a2f2f005ffd",
      "credentials": {
        "githubApi": {
          "id": "zPr0d4X43rST85W6",
          "name": "GitHub account"
        }
      }
    },
    {
      "parameters": {
        "resource": "file",
        "operation": "edit",
        "owner": {
          "__rl": true,
          "mode": "name",
          "value": "={{ $('Globals').item.json.repo.owner }}"
        },
        "repository": {
          "__rl": true,
          "mode": "name",
          "value": "={{ $('Globals').item.json.repo.name }}"
        },
        "filePath": "={{ $('Globals').item.json.repo.path }}{{$('Execute Workflow Trigger').first().json.id}}.json",
        "fileContent": "={{$('isDiffOrNew').item.json[\"n8n_data_stringy\"]}}",
        "commitMessage": "={{$('Execute Workflow Trigger').first().json.name}} ({{$json.github_status}})"
      },
      "id": "aebd8592-fa2d-4c83-82a2-4a66dd7e27de",
      "name": "Edit existing file",
      "type": "n8n-nodes-base.github",
      "position": [
        944,
        1008
      ],
      "typeVersion": 1,
      "webhookId": "19db097a-c49d-4dc6-acf2-7f016226fcde",
      "credentials": {
        "githubApi": {
          "id": "zPr0d4X43rST85W6",
          "name": "GitHub account"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "33ca0789-1101-4dc9-8cf4-55a0e2e847d3",
      "name": "Loop Over Items",
      "type": "n8n-nodes-base.splitInBatches",
      "position": [
        -48,
        368
      ],
      "typeVersion": 3
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "hours",
              "hoursInterval": 2
            }
          ]
        }
      },
      "id": "dda37955-2a0b-48aa-bd0c-003df7d4c082",
      "name": "Schedule Trigger",
      "type": "n8n-nodes-base.scheduleTrigger",
      "position": [
        -640,
        464
      ],
      "typeVersion": 1.2
    },
    {
      "parameters": {
        "content": "https://www.youtube.com/channel/UCIhrU-hkXylBKX8MRaN_2iA/ \nBase on solomon's work",
        "height": 80,
        "width": 385,
        "color": 7
      },
      "id": "7feca803-8786-48b0-82af-94126d34acb6",
      "name": "Sticky Note1",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        1008,
        1408
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "## Main workflow backup ",
        "height": 435,
        "width": 2089,
        "color": 3
      },
      "id": "eab69ca3-7c4e-4054-8c96-050f9c78358d",
      "name": "Sticky Note2",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -704,
        192
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "resource": "file",
        "operation": "get",
        "owner": {
          "__rl": true,
          "mode": "name",
          "value": "={{ $json.repo.owner }}"
        },
        "repository": {
          "__rl": true,
          "mode": "name",
          "value": "={{ $json.repo.name }}"
        },
        "filePath": "={{ $json.repo.path }}{{ $('Execute Workflow Trigger').item.json.id }}.json",
        "asBinaryProperty": false,
        "additionalParameters": {}
      },
      "id": "6a8d3581-94f8-47b9-be04-040bc43d63f8",
      "name": "Get file data",
      "type": "n8n-nodes-base.github",
      "position": [
        -128,
        752
      ],
      "typeVersion": 1,
      "alwaysOutputData": true,
      "webhookId": "98eba206-4709-45fb-966a-9f09e81e2bde",
      "credentials": {
        "githubApi": {
          "id": "zPr0d4X43rST85W6",
          "name": "GitHub account"
        }
      },
      "continueOnFail": true
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "6cf546c5-5737-4dbd-851b-17d68e0a3780",
              "name": "repo.owner",
              "type": "string",
              "value": "hpwspmu-web"
            },
            {
              "id": "452efa28-2dc6-4ea3-a7a2-c35d100d0382",
              "name": "repo.name",
              "type": "string",
              "value": "credentials"
            },
            {
              "id": "81c4dc54-86bf-4432-a23f-22c7ea831e74",
              "name": "repo.path",
              "type": "string",
              "value": "token/"
            }
          ]
        },
        "options": {}
      },
      "id": "cc4e2953-0d83-454d-9d04-a2d7172a952b",
      "name": "Globals",
      "type": "n8n-nodes-base.set",
      "position": [
        -336,
        752
      ],
      "typeVersion": 3.4
    },
    {
      "parameters": {
        "command": "npx n8n export:credentials --all --decrypted"
      },
      "id": "0ca37e93-d48c-401b-9e32-533aad8582e4",
      "name": "Execute Command",
      "type": "n8n-nodes-base.executeCommand",
      "position": [
        -416,
        368
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "jsCode": "// Function to beautify JSON\nfunction beautifyJson(jsonString) {\n  try {\n    // Parse the JSON string\n    const jsonObject = JSON.parse(jsonString);\n\n    // Format the JSON with indentation\n    return jsonObject; // Return the parsed object directly\n  } catch (error) {\n    // Return the error message if JSON is invalid\n    return `Invalid JSON: ${error.message}`;\n  }\n}\n\n// Retrieve the JSON object from the input data\nconst input = $input.all()[0].json;\n\n// Extract the JSON string from the stdout field\nconst jsonString = input.stdout.match(/\\[{.*}\\]/s);\n\n// Check if a valid JSON string is found\nif (!jsonString) {\n  return {\n    json: {\n      error: \"No valid JSON string found in stdout.\"\n    }\n  };\n}\n\n// Beautify the JSON\nconst beautifiedJson = beautifyJson(jsonString[0]);\n\n// Output the beautified JSON, ensuring each entry is in an object with a 'json' key\nconst output = beautifiedJson.map(entry => ({ json: entry }));\n\n// Return the output\nreturn output;\n"
      },
      "id": "6336beba-a673-432b-96fc-fcc3d08c80c7",
      "name": "JSON formatting",
      "type": "n8n-nodes-base.code",
      "position": [
        -240,
        368
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "workflowId": "={{ $workflow.id }}",
        "mode": "each",
        "options": {}
      },
      "id": "f9b37623-10dc-43d9-8c44-520cbb170327",
      "name": "Execute Workflow",
      "type": "n8n-nodes-base.executeWorkflow",
      "position": [
        192,
        368
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "inputSource": "passthrough"
      },
      "id": "123e6e9d-5706-4884-9f49-f22130362f23",
      "name": "Execute Workflow Trigger",
      "type": "n8n-nodes-base.executeWorkflowTrigger",
      "position": [
        -496,
        1008
      ],
      "typeVersion": 1.1
    },
    {
      "parameters": {
        "content": "# BACKUP CREDENTIALS LÊN GITHUB",
        "height": 80,
        "width": 740
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        0,
        0
      ],
      "id": "4a88c261-0f0d-492d-89c7-bf8f4755c209",
      "name": "Sticky Note4"
    },
    {
      "parameters": {
        "content": "## Edit this node 👇\nrepo.owner = id github count\nrepo.name = github repo name",
        "height": 100,
        "width": 270,
        "color": 4
      },
      "id": "7bd11b24-7ee6-45c5-927d-84d8d23227ff",
      "name": "Sticky Note5",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -480,
        640
      ],
      "typeVersion": 1
    }
  ],
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "shared": [
    {
      "createdAt": "2025-09-03T07:03:43.378Z",
      "updatedAt": "2025-09-03T07:03:43.378Z",
      "role": "workflow:owner",
      "workflowId": "XsztiP0w0ufqgDwq",
      "projectId": "1qt5AgXQ1QuSOdsi"
    }
  ],
  "staticData": null,
  "tags": [
    {
      "createdAt": "2025-09-03T07:01:33.150Z",
      "updatedAt": "2025-09-03T07:01:33.150Z",
      "id": "o8bBqqvgTKTqjVtM",
      "name": "core"
    }
  ],
  "triggerCount": 0,
  "updatedAt": "2025-09-03T07:05:03.000Z",
  "versionId": "0015e71f-4748-4279-9eda-849407cf1a03"
}